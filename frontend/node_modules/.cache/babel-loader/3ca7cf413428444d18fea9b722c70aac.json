{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useContext } from 'react';\nimport { DarkModeContext } from '../context/DarkModeContext';\n\nconst capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst useInput = function () {\n  _s();\n\n  let initialText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let inputName = arguments.length > 1 ? arguments[1] : undefined;\n  const [text, setText] = useState(initialText);\n  const {\n    darkMode,\n    setDarkMode\n  } = useContext(DarkModeContext);\n  const bind = {\n    value: text,\n    onChange: e => {\n      setText(e.target.value);\n    },\n    name: inputName,\n    type: 'text',\n    sx: {\n      mt: 2\n    },\n    variant: 'outlined',\n    label: capitalizeFirstLetter(inputName),\n    InputLabelProps: {\n      style: {\n        color: darkMode ? 'white' : 'black'\n      }\n    },\n    InputProps: {\n      style: {\n        color: darkMode ? 'white' : 'black',\n        borderColor: darkMode ? 'white' : 'black'\n      },\n      notchedOutline: {\n        color: darkMode ? 'white' : 'black'\n      }\n    },\n    OutlinedInputProps: {\n      style: {\n        borderColor: darkMode ? 'white' : 'black'\n      },\n      color: darkMode ? '#ffffff' : '#000000',\n      inputProps: {\n        style: {\n          color: darkMode ? 'white' : 'black',\n          borderColor: darkMode ? 'white' : 'black'\n        }\n      }\n    },\n    FilledInputProps: {\n      style: {\n        color: darkMode ? 'white' : 'black',\n        borderColor: darkMode ? 'white' : 'black'\n      }\n    },\n    inputProps: {\n      style: {\n        color: darkMode ? 'white' : 'black',\n        borderColor: darkMode ? 'white' : 'black'\n      },\n      notchedOutline: {\n        color: darkMode ? 'white' : 'black'\n      }\n    }\n  };\n  return [text, bind];\n};\n\n_s(useInput, \"BH57zGpOhlqvt3c6fIZWqPKQ/mo=\");\n\nexport default useInput;","map":{"version":3,"names":["useState","useContext","DarkModeContext","capitalizeFirstLetter","string","charAt","toUpperCase","slice","useInput","initialText","inputName","text","setText","darkMode","setDarkMode","bind","value","onChange","e","target","name","type","sx","mt","variant","label","InputLabelProps","style","color","InputProps","borderColor","notchedOutline","OutlinedInputProps","inputProps","FilledInputProps"],"sources":["/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/hooks/useInput.js"],"sourcesContent":["import {useState, useContext} from 'react';\nimport { DarkModeContext } from '../context/DarkModeContext';\n\nconst capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst useInput = (initialText = '', inputName) => {\n    const [text, setText] = useState(initialText);\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n\n    const bind = {\n        value: text,\n        onChange: (e) => {\n            setText(e.target.value)\n        },\n        name: inputName,\n        type: 'text',\n        sx: {\n            mt: 2\n        },\n        variant: 'outlined',\n        label: capitalizeFirstLetter(inputName),\n        InputLabelProps: {\n            style: {\n                color: darkMode ? 'white' : 'black'\n            }\n        },\n        InputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            notchedOutline: {\n                color: darkMode ? 'white' : 'black'\n            }\n        },\n        OutlinedInputProps: {\n            style: {\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            color: darkMode ? '#ffffff' : '#000000',\n            inputProps: {\n                style: {\n                    color: darkMode ? 'white' : 'black',\n                    borderColor: darkMode ? 'white' : 'black'\n                }\n            }\n        },\n        FilledInputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            }\n        },\n        inputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            notchedOutline: {\n                color: darkMode ? 'white' : 'black'\n            }\n        }\n    }\n\n    return [text, bind];\n}\n\nexport default useInput;"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,QAAmC,OAAnC;AACA,SAASC,eAAT,QAAgC,4BAAhC;;AAEA,MAAMC,qBAAqB,GAAIC,MAAD,IAAY;EACtC,OAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACH,CAFD;;AAIA,MAAMC,QAAQ,GAAG,YAAiC;EAAA;;EAAA,IAAhCC,WAAgC,uEAAlB,EAAkB;EAAA,IAAdC,SAAc;EAC9C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACS,WAAD,CAAhC;EACA,MAAM;IAACI,QAAD;IAAWC;EAAX,IAA0Bb,UAAU,CAACC,eAAD,CAA1C;EAEA,MAAMa,IAAI,GAAG;IACTC,KAAK,EAAEL,IADE;IAETM,QAAQ,EAAGC,CAAD,IAAO;MACbN,OAAO,CAACM,CAAC,CAACC,MAAF,CAASH,KAAV,CAAP;IACH,CAJQ;IAKTI,IAAI,EAAEV,SALG;IAMTW,IAAI,EAAE,MANG;IAOTC,EAAE,EAAE;MACAC,EAAE,EAAE;IADJ,CAPK;IAUTC,OAAO,EAAE,UAVA;IAWTC,KAAK,EAAEtB,qBAAqB,CAACO,SAAD,CAXnB;IAYTgB,eAAe,EAAE;MACbC,KAAK,EAAE;QACHC,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa;MADzB;IADM,CAZR;IAiBTgB,UAAU,EAAE;MACRF,KAAK,EAAE;QACHC,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa,OADzB;QAEHiB,WAAW,EAAEjB,QAAQ,GAAG,OAAH,GAAa;MAF/B,CADC;MAKRkB,cAAc,EAAE;QACZH,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa;MADhB;IALR,CAjBH;IA0BTmB,kBAAkB,EAAE;MAChBL,KAAK,EAAE;QACHG,WAAW,EAAEjB,QAAQ,GAAG,OAAH,GAAa;MAD/B,CADS;MAIhBe,KAAK,EAAEf,QAAQ,GAAG,SAAH,GAAe,SAJd;MAKhBoB,UAAU,EAAE;QACRN,KAAK,EAAE;UACHC,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa,OADzB;UAEHiB,WAAW,EAAEjB,QAAQ,GAAG,OAAH,GAAa;QAF/B;MADC;IALI,CA1BX;IAsCTqB,gBAAgB,EAAE;MACdP,KAAK,EAAE;QACHC,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa,OADzB;QAEHiB,WAAW,EAAEjB,QAAQ,GAAG,OAAH,GAAa;MAF/B;IADO,CAtCT;IA4CToB,UAAU,EAAE;MACRN,KAAK,EAAE;QACHC,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa,OADzB;QAEHiB,WAAW,EAAEjB,QAAQ,GAAG,OAAH,GAAa;MAF/B,CADC;MAKRkB,cAAc,EAAE;QACZH,KAAK,EAAEf,QAAQ,GAAG,OAAH,GAAa;MADhB;IALR;EA5CH,CAAb;EAuDA,OAAO,CAACF,IAAD,EAAOI,IAAP,CAAP;AACH,CA5DD;;GAAMP,Q;;AA8DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}