[{"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/index.js":"1","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/reportWebVitals.js":"2","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/App.js":"3","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Home.js":"4","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Posts.js":"5","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Dashboard.js":"6","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/context/CredentialsContext.js":"7","/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Login.js":"8","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/index.js":"9","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/App.js":"10","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/reportWebVitals.js":"11","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Login.js":"12","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Home.js":"13","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Posts.js":"14","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/context/CredentialsContext.js":"15","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Signup.js":"16","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Profile.js":"17","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/PageNotFound.js":"18","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Settings.js":"19","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/CreateTextPost.js":"20","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/hooks/useInput.js":"21","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/hooks/useComponent.js":"22","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/context/DarkModeContext.js":"23","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/components/TextPost.js":"24","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/CreateImagePost.js":"25","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/components/ImagePost.js":"26","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/constants.js":"27","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Search.js":"28"},{"size":1395,"mtime":1660038539115,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1660020424604,"results":"31","hashOfConfig":"30"},{"size":1106,"mtime":1660038027723,"results":"32","hashOfConfig":"30"},{"size":92,"mtime":1660025306248,"results":"33","hashOfConfig":"30"},{"size":95,"mtime":1660025318519,"results":"34","hashOfConfig":"30"},{"size":450,"mtime":1660038036120,"results":"35","hashOfConfig":"30"},{"size":144,"mtime":1660026108442,"results":"36","hashOfConfig":"30"},{"size":891,"mtime":1660039706364,"results":"37","hashOfConfig":"30"},{"size":4296,"mtime":1660648079596,"results":"38","hashOfConfig":"39"},{"size":2536,"mtime":1660648087653,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1660020424604,"results":"41","hashOfConfig":"39"},{"size":6125,"mtime":1660651532444,"results":"42","hashOfConfig":"39"},{"size":614,"mtime":1660391321772,"results":"43","hashOfConfig":"39"},{"size":1357,"mtime":1660543591120,"results":"44","hashOfConfig":"39"},{"size":144,"mtime":1660026108442,"results":"45","hashOfConfig":"39"},{"size":6807,"mtime":1660651537374,"results":"46","hashOfConfig":"39"},{"size":10114,"mtime":1660648036028,"results":"47","hashOfConfig":"39"},{"size":406,"mtime":1660296991732,"results":"48","hashOfConfig":"39"},{"size":878,"mtime":1660611127448,"results":"49","hashOfConfig":"39"},{"size":3016,"mtime":1660662568584,"results":"50","hashOfConfig":"39"},{"size":1975,"mtime":1660653075097,"results":"51","hashOfConfig":"39"},{"size":3155,"mtime":1660652157755,"results":"52","hashOfConfig":"39"},{"size":125,"mtime":1660393633645,"results":"53","hashOfConfig":"39"},{"size":537,"mtime":1660647850601,"results":"54","hashOfConfig":"39"},{"size":4414,"mtime":1660662506090,"results":"55","hashOfConfig":"39"},{"size":709,"mtime":1660662141649,"results":"56","hashOfConfig":"39"},{"size":14869,"mtime":1660626215937,"results":"57","hashOfConfig":"39"},{"size":141,"mtime":1660630624100,"results":"58","hashOfConfig":"39"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r89gaa",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},"b0lwv4",{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/index.js",[],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/reportWebVitals.js",[],[],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/App.js",["156","157"],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Home.js",[],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Posts.js",[],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Dashboard.js",["158","159"],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/context/CredentialsContext.js",[],[],"/Users/sebastianwebster/IOD_FOLDER/9thAugust/react-router-app/src/routes/Login.js",["160"],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/index.js",["161"],[],"import React, {useState, lazy, Suspense} from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom'\nimport { CredentialsContext } from './context/CredentialsContext';\nimport PageNotFound from './routes/PageNotFound';\nimport Settings from './routes/Settings';\nimport { DarkModeContext } from './context/DarkModeContext';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst LazyApp = lazy(() => import('./App'))\nconst LazyHome = lazy(() => import('./routes/Home'));\nconst LazyProfile = lazy(() => import('./routes/Profile'))\nconst LazyLogin = lazy(() => import('./routes/Login'))\nconst LazySignup = lazy(() => import('./routes/Signup'))\nconst LazyPosts = lazy(() => import('./routes/Posts'))\nconst LazySearch = lazy(() => import('./routes/Search'))\nconst LazyCreateImagePost = lazy(() => import('./routes/CreateImagePost'))\nconst LazyCreateTextPost = lazy(() => import('./routes/CreateTextPost'))\nconst LazySettings = lazy(() => import('./routes/Settings'))\n\nconst LazyLoadingComponent = ({text}) => {\n  return (\n    <>\n      <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', flexDirection: 'column'}}>\n        <h1>{text}</h1>\n        <CircularProgress/>\n      </div>\n    </>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst ComponentToRender = () => {\n  const [storedCredentials, setStoredCredentials] = useState(JSON.parse(localStorage.getItem('SebMediaCredentials')));\n  const [darkMode, setDarkMode] = useState(window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : true)\n\n  window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\n    setDarkMode(event.matches)\n});\n\n  return (\n    <div style={{height: '100vh', backgroundColor: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black'}}>\n      <CredentialsContext.Provider value={{storedCredentials, setStoredCredentials}}>\n        <DarkModeContext.Provider value={{darkMode, setDarkMode}}>\n          <BrowserRouter>\n            <Routes>\n              <Route path=\"/\" element={<Suspense fallback={<LazyLoadingComponent text=\"SebMedia is loading...\"/>}><LazyApp/></Suspense>}>\n                <Route path=\"home\" element={<Suspense fallback={<LazyLoadingComponent text=\"Home Screen is loading...\"/>}><LazyHome/></Suspense>}/>\n                <Route path=\"search\" element={<Suspense fallback={<LazyLoadingComponent text=\"Search Screen is loading...\"/>}><LazySearch/></Suspense>}/>\n                <Route path=\"posts\" element={<Suspense fallback={<LazyLoadingComponent text=\"Post creation screen is loading...\"/>}><LazyPosts/></Suspense>}>\n                  <Route path=\"createTextPost\" element={<Suspense fallback={<LazyLoadingComponent text=\"Create Text Post Screen is loading...\"/>}><LazyCreateTextPost/></Suspense>}/>\n                  <Route path=\"createImagePost\" element={<Suspense fallback={<LazyLoadingComponent text=\"Create Image Post Screen is loading...\"/>}><LazyCreateImagePost/></Suspense>}/>\n                </Route>\n                <Route path=\"profile\" element={<Suspense fallback={<LazyLoadingComponent text=\"Profile Screen is loading...\"/>}><LazyProfile/></Suspense>}/>\n                <Route path=\"settings\" element={<Suspense fallback={<LazyLoadingComponent text=\"Settings Screen is loading...\"/>}><LazySettings/></Suspense>}/>\n              </Route>\n              <Route path=\"login\" element={<Suspense fallback={<LazyLoadingComponent text=\"Login Screen is loading...\"/>}><LazyLogin/></Suspense>}/>\n              <Route path=\"signup\" element={<Suspense fallback={<LazyLoadingComponent text=\"Signup Screen is loading...\"/>}><LazySignup/></Suspense>}/>\n              <Route path=\"*\" element={<PageNotFound/>}/>\n            </Routes>\n          </BrowserRouter>\n        </DarkModeContext.Provider>\n      </CredentialsContext.Provider>\n    </div>\n  )\n}\n\nroot.render(\n  <ComponentToRender/>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/App.js",["162","163","164"],[],"import React, {useContext, useState} from 'react';\nimport { Outlet, NavLink, Navigate } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHouse, faChartLine, faPlus, faGear, faMoon, faSun, faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'\nimport './App.css'\nimport { CredentialsContext } from './context/CredentialsContext';\nimport { DarkModeContext } from './context/DarkModeContext';\nimport useComponent from './hooks/useComponent';\n\nfunction App() {\n  const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\n  const {darkMode, setDarkMode} = useContext(DarkModeContext);\n  const {Div} = useComponent()\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    console.log(event.currentTarget)\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const Logout = () => {\n    handleClose()\n    localStorage.removeItem('SebMediaCredentials')\n    setStoredCredentials(null)\n  }\n\n  const navStyle = {\n    marginRight: '5%',\n    fontSize: 35\n  }\n\n  const darkLightModeIconStyle = {\n    fontSize: 35,\n    marginLeft: 10,\n    cursor: 'pointer'\n  }\n  return (\n    <Div>\n      <header style={{borderBottomColor: darkMode ? 'white' : 'black'}}>\n        <div>\n          <h1>SebMedia 2.0</h1>\n          <button style={{background: 'none', margin: 0, padding: 0, border: 'none'}} onClick={() => {setDarkMode(!darkMode)}}>\n            {darkMode ?\n              <FontAwesomeIcon icon={faSun} style={{...darkLightModeIconStyle, color: 'white'}}/>\n            :\n              <FontAwesomeIcon icon={faMoon} style={{...darkLightModeIconStyle, color: 'black'}}/>\n            }\n          </button>\n        </div>\n        <div>\n          <NavLink to=\"home\" style={navStyle}>\n            <FontAwesomeIcon icon={faHouse}/>\n          </NavLink>\n          <NavLink to=\"search\" style={navStyle}>\n            <FontAwesomeIcon icon={faMagnifyingGlass}/>\n          </NavLink>\n          <NavLink to=\"profile\" style={navStyle}>\n            <FontAwesomeIcon icon={faChartLine}/>\n          </NavLink>\n          <NavLink to=\"posts\" style={navStyle}>\n            <FontAwesomeIcon icon={faPlus}/>\n          </NavLink>\n          <NavLink to=\"settings\" style={navStyle}>\n            <FontAwesomeIcon icon={faGear}/>\n          </NavLink>\n        </div>\n      </header>\n      {storedCredentials ? <Outlet/> : <Navigate to=\"login\"/>}\n    </Div>\n  );\n}\n\nexport default App;\n","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/reportWebVitals.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Login.js",["165","166"],[],"import React, {useContext, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CredentialsContext } from '../context/CredentialsContext';\nimport axios from 'axios';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Link from '@mui/material/Link'\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DarkModeContext } from '../context/DarkModeContext';\nimport useComponent from '../hooks/useComponent';\n\nconst Login = () => {\n    const [error, setError] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\n    const [rememberMe, setRememberMe] = useState(true);\n    const navigate = useNavigate();\n    const theme = createTheme();\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n    const { StyledTextField } = useComponent();\n\n    const handleLogin = (e) => {\n        e.preventDefault()\n        setLoading(true)\n        setError(null)\n\n        const url = 'http://localhost:8080/user/login'\n        const data = new FormData(e.currentTarget)\n        const toSend = {\n            email: data.get('email'),\n            password: data.get('password')\n        }\n\n        axios.post(url, toSend).then(result => {\n            setLoading(false)\n            setStoredCredentials(result.data.data)\n            if (rememberMe) localStorage.setItem('SebMediaCredentials', JSON.stringify(result.data.data))\n            navigate('/home')\n        }).catch(error => {\n            setLoading(false)\n            setError(error?.response?.data?.error || 'Unknown error occured')\n            console.error(error)\n        })\n    }\n\n    return (\n        <div style={{height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column'}}>\n            <h1 style={{marginBottom: 0}}>Welcome to SebMedia!</h1>\n            {loading ?\n                <Box sx={{display: 'flex', justifyContent: 'center', mt: 3}}>\n                    <CircularProgress/>\n                </Box>\n            :\n                <>\n                    <ThemeProvider theme={theme}>\n                        <Container component=\"main\" maxWidth=\"xs\">\n                            <CssBaseline />\n                            <Box\n                                sx={{\n                                    marginTop: 8,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                }}\n                            >\n                                <Typography component=\"h1\" variant=\"h5\">\n                                    Sign in\n                                </Typography>\n                                <Box component=\"form\" onSubmit={handleLogin} noValidate sx={{ mt: 1 }}>\n                                    <StyledTextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    autoFocus\n                                    InputLabelProps={{\n                                        style: {\n                                            color: darkMode ? 'white' : 'black'\n                                        }\n                                    }}\n                                    />\n                                    <StyledTextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    InputLabelProps={{\n                                        style: {\n                                            color: darkMode ? 'white' : 'black'\n                                        }\n                                    }}\n                                    />\n                                    <FormControlLabel\n                                    control={<Checkbox value=\"remember\" color=\"primary\" defaultChecked onChange={(e) => setRememberMe(e.target.checked)}/>}\n                                    label=\"Remember me\"\n                                    />\n                                    {error && <Typography component=\"h1\" variant=\"h6\" sx={{color: 'red', textAlign: 'center'}}>{error}</Typography>}\n                                    <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    sx={{ mt: 3, mb: 2 }}\n                                    >\n                                    Sign In\n                                    </Button>\n                                    <Box sx={{display: 'flex', justifyContent: 'center'}}>\n                                        <Link variant='h5' onClick={() => navigate('/signup')} sx={{cursor: 'pointer'}}>Don't have an account? Signup</Link>\n                                    </Box>\n                                </Box>\n                            </Box>\n                        </Container>\n                    </ThemeProvider>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default Login;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Home.js",["167"],[],"import React, {useContext} from 'react';\nimport { CredentialsContext } from '../context/CredentialsContext';\n\nconst Home = () => {\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\n    const {following} = storedCredentials;\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column'}}>\n            {following.length > 1 ?\n                <h1>Home feed coming soon</h1>\n            :\n                <h1>Start following some people to see a home feed!</h1>\n            }\n        </div>\n    )\n}\n\nexport default Home;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Posts.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/context/CredentialsContext.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Signup.js",["168","169"],[],"import React, {useContext, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { CredentialsContext } from '../context/CredentialsContext';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Link from '@mui/material/Link'\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DarkModeContext } from '../context/DarkModeContext';\nimport useComponent from '../hooks/useComponent';\n\nconst Signup = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n    const [rememberMe, setRememberMe] = useState(true)\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext)\n    const {darkMode, setDarkMode} = useContext(DarkModeContext)\n    const navigate = useNavigate()\n    const theme = createTheme();\n    const { StyledTextField } = useComponent();\n\n    const handleSignup = (e) => {\n        e.preventDefault();\n\n        setLoading(true)\n        setError(null)\n\n        const url = 'http://localhost:8080/user/signup';\n        const data = new FormData(e.currentTarget)\n        const toSend = {\n            email: data.get('email'),\n            password: data.get('password'),\n            name: data.get('name')\n        }\n\n        axios.post(url, toSend).then(result => {\n            setLoading(false)\n            setStoredCredentials(result.data.data)\n            if (rememberMe) localStorage.setItem('SebMediaCredentials', JSON.stringify(result.data.data))\n            navigate('/home')\n        }).catch(error => {\n            setLoading(false)\n            setError(error?.response?.data?.error || 'Unknown error occured')\n            console.error(error)\n        })\n    }\n\n    return (\n        <div style={{height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column'}}>\n            <h1 style={{marginBottom: 0}}>Welcome to SebMedia!</h1>\n            {loading ?\n                <Box sx={{display: 'flex', justifyContent: 'center', mt: 3}}>\n                    <CircularProgress/>\n                </Box>\n            :\n                <>\n                    <ThemeProvider theme={theme}>\n                        <Container component=\"main\" maxWidth=\"xs\">\n                            <CssBaseline />\n                            <Box\n                                sx={{\n                                    marginTop: 8,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                }}\n                            >\n                                <Typography component=\"h1\" variant=\"h5\">\n                                    Signup\n                                </Typography>\n                                <Box component=\"form\" onSubmit={handleSignup} noValidate sx={{ mt: 1 }}>\n                                    <StyledTextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"name\"\n                                    label=\"Username\"\n                                    name=\"name\"\n                                    autoFocus\n                                    InputLabelProps={{\n                                        style: {\n                                            color: darkMode ? 'white' : 'dark'\n                                        }\n                                    }}\n                                    />\n                                    <StyledTextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    InputLabelProps={{\n                                        style: {\n                                            color: darkMode ? 'white' : 'dark'\n                                        }\n                                    }}\n                                    />\n                                    <StyledTextField\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    InputLabelProps={{\n                                        style: {\n                                            color: darkMode ? 'white' : 'dark'\n                                        }\n                                    }}\n                                    />\n                                    <FormControlLabel\n                                    control={<Checkbox value=\"remember\" color=\"primary\" defaultChecked onChange={(e) => setRememberMe(e.target.checked)}/>}\n                                    label=\"Remember me\"\n                                    />\n                                    {error && <Typography component=\"h1\" variant=\"h6\" sx={{color: 'red', textAlign: 'center'}}>{error}</Typography>}\n                                    <Button\n                                    type=\"submit\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    sx={{ mt: 3, mb: 2 }}\n                                    >\n                                    Signup\n                                    </Button>\n                                    <Box sx={{display: 'flex', justifyContent: 'center'}}>\n                                        <Link variant='h5' onClick={() => navigate('/login')} sx={{cursor: 'pointer'}}>Already have an account? Login</Link>\n                                    </Box>\n                                </Box>\n                            </Box>\n                        </Container>\n                    </ThemeProvider>\n                </>\n            }\n        </div>\n    )\n}\n\nexport default Signup;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Profile.js",["170","171","172","173"],[],"import React, {useContext, useState, useEffect, useMemo, Fragment} from 'react';\nimport { CredentialsContext } from '../context/CredentialsContext';\nimport useComponent from '../hooks/useComponent';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport axios from 'axios';\nimport TextPost from '../components/TextPost';\nimport Grid from '@mui/material/Grid'\nimport ImagePost from '../components/ImagePost';\nimport { defaultPfp } from '../constants';\nimport { useFilePicker } from 'use-file-picker';\nimport { DarkModeContext } from '../context/DarkModeContext';\n\nvar _ = require('lodash')\n\nconst Profile = () => {\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext)\n    const { FlexRowCentreDiv, FlexColumnCentreDiv, FlexRowSpaceAroundDiv, H3NoMargin } = useComponent()\n    const {name, followers, following, profileImageKey, _id} = storedCredentials;\n    const [view, setView] = useState('textPosts')\n    const [textPosts, setTextPosts] = useState(null)\n    const [loadingTextPosts, setLoadingTextPosts] = useState(false)\n    const [loadingTextPostsError, setLoadingTextPostsError] = useState(null)\n    const [imagePosts, setImagePosts] = useState(null)\n    const [loadingImagePosts, setLoadingImagePosts] = useState(false)\n    const [loadingImagePostsError, setLoadingImagePostsError] = useState(null)\n    const [openProfileImageFileSelector, { plainFiles: profileImageToUpload, loading: profileImageFileLoading}] = useFilePicker({accept: 'image/jpeg', multiple: false})\n    const [profileImageUploading, setProfileImageUploading] = useState(false);\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n\n    const loadPosts = {\n        textPosts: () => {\n            if (loadingTextPosts === false) {\n                setLoadingTextPosts(true)\n                setLoadingTextPostsError(null)\n\n                axios.get(`http://localhost:8080/user/textPostsByUserName/?username=${name}&skip=${Array.isArray(textPosts) ? textPosts.length : 0}`)\n                .then(response => response.data.data)\n                .then(result => {\n                    console.log(result)\n                    setTextPosts(posts => {\n                        if (Array.isArray(result) && result.length > 0) {\n                            const newTextPosts = Array.isArray(posts) ? _.cloneDeep(posts) : []\n                            newTextPosts.push(...result)\n                            return newTextPosts\n                        } else return posts\n                    })\n                    setLoadingTextPosts(false)\n                    setLoadingTextPostsError(null)\n                })\n                .catch(error => {\n                    setLoadingTextPosts(false)\n                    setLoadingTextPostsError(error?.response?.data?.error || String(error))\n                    console.error(error)\n                })\n            }\n        },\n        imagePosts: () => {\n            if (loadingImagePosts === false) {\n                setLoadingImagePosts(true)\n                setLoadingImagePostsError(null)\n\n                axios.get(`http://localhost:8080/user/imagePostsByUserName/?username=${name}&skip=${Array.isArray(imagePosts) ? imagePosts.length : 0}`)\n                .then(response => response.data.data)\n                .then(result => {\n                    console.log(result)\n                    setImagePosts(posts => {\n                        if (Array.isArray(result) && result.length > 0) {\n                            const newImagePosts = Array.isArray(posts) ? _.cloneDeep(posts) : []\n                            newImagePosts.push(...result)\n                            return newImagePosts\n                        } else return posts\n                    })\n                    setLoadingImagePosts(false)\n                    setLoadingImagePostsError(null)\n                }).catch(error => {\n                    setLoadingImagePosts(false)\n                    setLoadingTextPostsError(error?.response?.data?.error || String(error))\n                    console.error(error)\n                })\n            }\n        }\n    }\n\n    useEffect(() => {\n        loadPosts.textPosts()\n    }, [])\n\n    const handleViewChange = (event, nextView) => {\n        if (nextView !== view && nextView !== null) {\n            setView(nextView)\n            if (nextView === 'textPosts' && textPosts === null) loadPosts.textPosts()\n            if (nextView === 'imagePosts' && imagePosts === null) loadPosts.imagePosts()\n        }\n        if (nextView === null) {\n            loadPosts[view]();\n        }\n    }\n\n    const DisplayTextPosts = useMemo(() => {\n        return Array.isArray(textPosts) ? textPosts.map((post, index) => (\n            <Fragment key={index.toString()}>\n                <TextPost {...post}/>\n            </Fragment>\n        )) : null\n    }, [textPosts])\n\n    const DisplayImagePosts = useMemo(() => {\n        return Array.isArray(imagePosts) ? imagePosts.map((post, index) => (\n            <Fragment key={index.toString()}>\n                <ImagePost {...post}/>\n            </Fragment>\n        )) : null\n    }, [imagePosts])\n\n    useEffect(() => {\n        console.log(profileImageToUpload[0])\n        if (profileImageToUpload[0]) {\n            setProfileImageUploading(true)\n            const toSend = new FormData();\n\n            toSend.append('image', profileImageToUpload[0])\n            toSend.append('_id', _id)\n\n            axios.post('http://localhost:8080/user/updateProfileImage', toSend, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'multipart/form-data'\n                }\n            }).then(response => response.data.data)\n            .then(result => {\n                const newStoredCredentials = _.cloneDeep(storedCredentials)\n                newStoredCredentials.profileImageKey = result\n                if (localStorage.getItem('SebMediaCredentials')) {\n                    localStorage.setItem('SebMediaCredentials', JSON.stringify(newStoredCredentials))\n                }\n                setStoredCredentials(newStoredCredentials)\n                setProfileImageUploading(false)\n            })\n            .catch(error => {\n                alert('Error uploading profile image: ' + (error?.response?.data?.error || String(error)))\n                console.error(error)\n                setProfileImageUploading(false)\n            })\n        }\n    }, [profileImageToUpload])\n\n    return (\n        <>\n            <FlexRowSpaceAroundDiv>\n                <FlexRowCentreDiv>\n                    <h1>{name}</h1>\n                    {profileImageUploading || profileImageFileLoading ?\n                        <Box sx={{display: 'flex', justifyContent: 'center', width: 40, height: 40, marginLeft: 1}}>\n                            <CircularProgress/>\n                        </Box>\n                    :\n                        <img onClick={() => openProfileImageFileSelector()} src={profileImageKey ? `http://localhost:8080/image/${profileImageKey}` : defaultPfp} style={{width: 50, height: 50, borderRadius: '100%', marginLeft: 10, cursor: 'pointer'}}/>\n                    }\n                </FlexRowCentreDiv>\n                <FlexColumnCentreDiv>\n                    <H3NoMargin>{followers.length}</H3NoMargin>\n                    <H3NoMargin>Followers</H3NoMargin>\n                </FlexColumnCentreDiv>\n                <FlexColumnCentreDiv>\n                    <H3NoMargin>{following.length}</H3NoMargin>\n                    <H3NoMargin>Following</H3NoMargin>\n                </FlexColumnCentreDiv>\n            </FlexRowSpaceAroundDiv>\n            <ToggleButtonGroup\n                color=\"primary\"\n                value={view}\n                exclusive\n                onChange={handleViewChange}\n                fullWidth\n                sx={{mb: 3}}\n            >\n                <ToggleButton value=\"textPosts\" sx={{color: darkMode ? 'white' : 'black', borderColor: darkMode ? 'white' : 'black'}}>Text Posts</ToggleButton>\n                <ToggleButton value=\"imagePosts\" sx={{color: darkMode ? 'white' : 'black', borderColor: darkMode ? 'white' : 'black'}}>Image Posts</ToggleButton>\n            </ToggleButtonGroup>\n            {view === 'textPosts' ?\n                <>\n                    {\n                        loadingTextPostsError ?\n                            <h1 style={{color: 'red', textAlign: 'center'}}>{loadingTextPostsError}</h1>\n                        : loadingTextPosts ?\n                            <Box sx={{display: 'flex', justifyContent: 'center', mt: 3}}>\n                                <CircularProgress/>\n                            </Box>\n                        : Array.isArray(textPosts) && textPosts.length === 0 ?\n                            <h1 style={{textAlign: 'center'}}>{name} has no text posts.</h1>\n                        :\n                            <Grid container spacing={2}>\n                                {DisplayTextPosts}\n                            </Grid>\n                    }\n                </>\n            : view === 'imagePosts' ?\n                <>\n                    {\n                        loadingImagePostsError ?\n                            <h1 style={{color: 'red', textAlign: 'center'}}>{loadingImagePostsError}</h1>\n                        : loadingImagePosts ? \n                            <Box sx={{display: 'flex', justifyContent: 'center', mt: 3}}>\n                                <CircularProgress/>\n                            </Box>\n                        : Array.isArray(imagePosts) && imagePosts.length === 0 ?\n                            <h1 style={{textAlign: 'center'}}>{name} has no image posts.</h1>\n                        :\n                            <Grid container spacing={2}>\n                                {DisplayImagePosts}\n                            </Grid>\n                    }\n                </>\n            : <h1>Pretty big error occured</h1>}\n        </>\n    )\n}\n\nexport default Profile;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/PageNotFound.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Settings.js",["174","175"],[],"import React, {useContext} from \"react\";\nimport { CredentialsContext } from \"../context/CredentialsContext\";\nimport { Button } from '@mui/material';\n\nconst SettingsButton = ({text, onClick}) => (\n    <button onClick={onClick} style={{width: '50vw', height: '10vh', marginTop: '2vh', border: '1px solid black', borderRadius: 10, fontSize: '5vh', cursor: 'pointer'}}>{text}</button>\n)\n\nconst Settings = () => {\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext)\n\n    const Logout = () => {\n        localStorage.removeItem('SebMediaCredentials')\n        setStoredCredentials(null)\n    }\n\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column'}}>\n            <Button variant=\"outlined\" onClick={Logout} size=\"large\">Logout</Button>\n        </div>\n    )\n}\n\nexport default Settings;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/CreateTextPost.js",["176","177","178"],[],"import React, {useContext, useState} from 'react';\nimport { CredentialsContext } from '../context/CredentialsContext';\nimport useInput from '../hooks/useInput';\nimport { Box, CircularProgress, TextField, Grid } from '@mui/material';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom'\nimport { DarkModeContext } from \"../context/DarkModeContext\";\nimport TextPost from '../components/TextPost';\nimport AddIcon from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab';\n\nconst CreateTextPost = () => {\n    const {storedCredentials, setStoredCredentials} = useContext(CredentialsContext);\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n    const {_id} = storedCredentials;\n    const [title, bindTitle] = useInput('', 'title')\n    const [body, bindBody] = useInput('', 'body')\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n    const navigate = useNavigate();\n\n    const uploadTextPost = (e) => {\n        e.preventDefault();\n        setLoading(true)\n        setError(null)\n\n        const toSend = {\n            title,\n            body,\n            userId: _id\n        }\n\n        axios.post('http://localhost:8080/user/textPost', toSend).then(response => response.data)\n        .then(result => {\n            setLoading(false)\n            setError(null)\n            navigate('/home')\n        }).catch(error => {\n            setLoading(false)\n            setError(error?.response?.data?.error)\n        })\n    }\n\n    return (\n        <>\n            <h1>Create Text Post</h1>\n            {loading ?\n                <Box sx={{display: 'flex', justifyContent: 'center', mt: 3}}>\n                    <CircularProgress/>\n                </Box>\n            :\n                <>\n                    <form onSubmit={uploadTextPost} style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column'}}>\n                        <TextField {...bindTitle}/>\n                        <TextField {...bindBody} multiline/>\n                        {title && body &&\n                            <Fab color=\"primary\" aria-label=\"submit\" type=\"submit\" variant=\"extended\" sx={{mt: 2}}>\n                                <AddIcon />\n                                Submit\n                            </Fab>\n                        }\n                        {error && <p style={{color: 'red'}}>{error}</p>}\n                    </form>\n                    <h2>Preview:</h2>\n                    {!title || !body ?\n                        <>\n                            <h3>Preview is waiting for a title AND body to be entered...</h3>\n                            <CircularProgress/>\n                        </>\n                    :\n                        <Grid container spacing={2} sx={{justifyContent: 'center'}}>\n                            <TextPost title={title} body={body}/>\n                        </Grid>\n                    }\n                </>\n            }\n        </>\n    )\n}\n\nexport default CreateTextPost;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/hooks/useInput.js",["179"],[],"import {useState, useContext} from 'react';\nimport { DarkModeContext } from '../context/DarkModeContext';\n\nconst capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst useInput = (initialText = '', inputName) => {\n    const [text, setText] = useState(initialText);\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n\n    const bind = {\n        value: text,\n        onChange: (e) => {\n            setText(e.target.value)\n        },\n        name: inputName,\n        type: 'text',\n        sx: {\n            mt: 2\n        },\n        variant: 'outlined',\n        label: capitalizeFirstLetter(inputName),\n        InputLabelProps: {\n            style: {\n                color: darkMode ? 'white' : 'black'\n            }\n        },\n        InputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            notchedOutline: {\n                color: darkMode ? 'white' : 'black'\n            }\n        },\n        OutlinedInputProps: {\n            style: {\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            color: darkMode ? '#ffffff' : '#000000',\n            inputProps: {\n                style: {\n                    color: darkMode ? 'white' : 'black',\n                    borderColor: darkMode ? 'white' : 'black'\n                }\n            }\n        },\n        FilledInputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            }\n        },\n        inputProps: {\n            style: {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            notchedOutline: {\n                color: darkMode ? 'white' : 'black'\n            }\n        }\n    }\n\n    return [text, bind];\n}\n\nexport default useInput;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/hooks/useComponent.js",["180"],[],"import { useContext } from \"react\";\nimport { DarkModeContext } from \"../context/DarkModeContext\";\nimport { styled } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\n\nconst useComponent = () => {\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n\n    const FlexRowCentreDiv = (props) => {\n        return <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'row', backgroundColor: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black', ...props.style}}>{props.children}</div>\n    }\n\n    const FlexColumnCentreDiv = (props) => {\n        return <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', backgroundColor: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black', ...props.style}}>{props.children}</div>\n    }\n\n    const FlexRowSpaceAroundDiv = (props) => {\n        return <div style={{display: 'flex', justifyContent: 'space-around', alignItems: 'center', flexDirection: 'row', backgroundColor: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black', ...props.style}}>{props.children}</div>\n    }\n\n    const H3NoMargin = (props) => <h3 style={{margin: 0, color: darkMode ? 'white' : 'black', ...props.style}}>{props.children}</h3>\n\n    const Div = (props) => <div style={{backgroundColor: darkMode ? 'black' : 'white', color: darkMode ? 'white' : 'black', ...props.style}}>{props.children}</div>\n\n    const StyledTextField = styled(TextField)({\n        '& label.Mui-focused': {\n            color: darkMode ? 'white' : 'black'\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: darkMode ? 'white' : 'black'\n        },\n        '& .MuiOutlinedInput-root' : {\n            color: darkMode ? 'white' : 'black',\n            '& fieldset': {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            '&:hover fieldset': {\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: darkMode ? 'white' : 'black'\n            }\n        }\n    })\n\n    const StyledTextFieldStylesObject = {\n        '& label.Mui-focused': {\n            color: darkMode ? 'white' : 'black'\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: darkMode ? 'white' : 'black'\n        },\n        '& .MuiOutlinedInput-root' : {\n            color: darkMode ? 'white' : 'black',\n            '& fieldset': {\n                color: darkMode ? 'white' : 'black',\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            '&:hover fieldset': {\n                borderColor: darkMode ? 'white' : 'black'\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: darkMode ? 'white' : 'black'\n            }\n        }\n    }\n\n    return {\n        FlexRowCentreDiv,\n        FlexColumnCentreDiv,\n        FlexRowSpaceAroundDiv,\n        H3NoMargin,\n        Div,\n        StyledTextField,\n        StyledTextFieldStylesObject\n    }\n}\n\nexport default useComponent;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/context/DarkModeContext.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/components/TextPost.js",["181"],[],"import React, {useContext} from 'react';\nimport { Grid } from '@mui/material';\nimport { DarkModeContext } from '../context/DarkModeContext';\n\nconst TextPost = ({title, body, datePosted}) => {\n    const {darkMode, setDarkMode} = useContext(DarkModeContext);\n    return (\n        <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>\n            <div style={{border: `1px solid ${darkMode ? 'white' : 'black'}`}}>\n                <h1>{title}</h1>\n                <p>{body}</p>\n            </div>\n        </Grid>\n    )\n}\n\nexport default TextPost;","/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/CreateImagePost.js",["182"],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/components/ImagePost.js",["183","184"],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/constants.js",[],[],"/Users/sebastianwebster/GitHub/SebMedia-2.0/frontend/src/routes/Search.js",[],[],{"ruleId":"185","severity":1,"message":"186","line":4,"column":40,"nodeType":"187","messageId":"188","endLine":4,"endColumn":52},{"ruleId":"185","severity":1,"message":"189","line":9,"column":29,"nodeType":"187","messageId":"188","endLine":9,"endColumn":49},{"ruleId":"185","severity":1,"message":"190","line":5,"column":12,"nodeType":"187","messageId":"188","endLine":5,"endColumn":29},{"ruleId":"185","severity":1,"message":"189","line":5,"column":31,"nodeType":"187","messageId":"188","endLine":5,"endColumn":51},{"ruleId":"185","severity":1,"message":"191","line":1,"column":16,"nodeType":"187","messageId":"188","endLine":1,"endColumn":26},{"ruleId":"185","severity":1,"message":"192","line":8,"column":8,"nodeType":"187","messageId":"188","endLine":8,"endColumn":16},{"ruleId":"185","severity":1,"message":"193","line":15,"column":9,"nodeType":"187","messageId":"188","endLine":15,"endColumn":13},{"ruleId":"185","severity":1,"message":"194","line":16,"column":9,"nodeType":"187","messageId":"188","endLine":16,"endColumn":20},{"ruleId":"185","severity":1,"message":"195","line":24,"column":9,"nodeType":"187","messageId":"188","endLine":24,"endColumn":15},{"ruleId":"185","severity":1,"message":"190","line":21,"column":12,"nodeType":"187","messageId":"188","endLine":21,"endColumn":29},{"ruleId":"185","severity":1,"message":"196","line":25,"column":22,"nodeType":"187","messageId":"188","endLine":25,"endColumn":33},{"ruleId":"185","severity":1,"message":"189","line":5,"column":31,"nodeType":"187","messageId":"188","endLine":5,"endColumn":51},{"ruleId":"185","severity":1,"message":"190","line":22,"column":12,"nodeType":"187","messageId":"188","endLine":22,"endColumn":29},{"ruleId":"185","severity":1,"message":"196","line":23,"column":22,"nodeType":"187","messageId":"188","endLine":23,"endColumn":33},{"ruleId":"185","severity":1,"message":"196","line":31,"column":22,"nodeType":"187","messageId":"188","endLine":31,"endColumn":33},{"ruleId":"197","severity":1,"message":"198","line":89,"column":8,"nodeType":"199","endLine":89,"endColumn":10,"suggestions":"200"},{"ruleId":"197","severity":1,"message":"201","line":148,"column":8,"nodeType":"199","endLine":148,"endColumn":30,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":160,"column":25,"nodeType":"205","endLine":160,"endColumn":253},{"ruleId":"185","severity":1,"message":"206","line":5,"column":7,"nodeType":"187","messageId":"188","endLine":5,"endColumn":21},{"ruleId":"185","severity":1,"message":"190","line":10,"column":12,"nodeType":"187","messageId":"188","endLine":10,"endColumn":29},{"ruleId":"185","severity":1,"message":"189","line":13,"column":31,"nodeType":"187","messageId":"188","endLine":13,"endColumn":51},{"ruleId":"185","severity":1,"message":"207","line":14,"column":12,"nodeType":"187","messageId":"188","endLine":14,"endColumn":20},{"ruleId":"185","severity":1,"message":"196","line":14,"column":22,"nodeType":"187","messageId":"188","endLine":14,"endColumn":33},{"ruleId":"185","severity":1,"message":"196","line":10,"column":22,"nodeType":"187","messageId":"188","endLine":10,"endColumn":33},{"ruleId":"185","severity":1,"message":"196","line":7,"column":22,"nodeType":"187","messageId":"188","endLine":7,"endColumn":33},{"ruleId":"185","severity":1,"message":"196","line":6,"column":22,"nodeType":"187","messageId":"188","endLine":6,"endColumn":33},{"ruleId":"185","severity":1,"message":"189","line":14,"column":31,"nodeType":"187","messageId":"188","endLine":14,"endColumn":51},{"ruleId":"185","severity":1,"message":"196","line":6,"column":22,"nodeType":"187","messageId":"188","endLine":6,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":12,"column":17,"nodeType":"205","endLine":12,"endColumn":147},"no-unused-vars","'faCirclePlus' is defined but never used.","Identifier","unusedVar","'setStoredCredentials' is assigned a value but never used.","'storedCredentials' is assigned a value but never used.","'useContext' is defined but never used.","'Settings' is defined but never used.","'open' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'Logout' is assigned a value but never used.","'setDarkMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadPosts'. Either include it or remove the dependency array.","ArrayExpression",["208"],"React Hook useEffect has missing dependencies: '_id', 'setStoredCredentials', and 'storedCredentials'. Either include them or remove the dependency array.",["209"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SettingsButton' is assigned a value but never used.","'darkMode' is assigned a value but never used.",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [loadPosts]",{"range":"214","text":"215"},"Update the dependencies array to be: [_id, profileImageToUpload, setStoredCredentials, storedCredentials]",{"range":"216","text":"217"},[4313,4315],"[loadPosts]",[6567,6589],"[_id, profileImageToUpload, setStoredCredentials, storedCredentials]"]